/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PublicImport } from './routes/_public'
import { Route as AuthImport } from './routes/_auth'
import { Route as IndexImport } from './routes/index'
import { Route as PublicRegisterIndexImport } from './routes/_public/register/index'
import { Route as PublicLoginIndexImport } from './routes/_public/login/index'
import { Route as AuthSettingsIndexImport } from './routes/_auth/settings/index'
import { Route as AuthLogsIndexImport } from './routes/_auth/logs/index'
import { Route as AuthHomeIndexImport } from './routes/_auth/home/index'
import { Route as AuthBuilderIndexImport } from './routes/_auth/builder/index'

// Create/Update Routes

const PublicRoute = PublicImport.update({
  id: '/_public',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PublicRegisterIndexRoute = PublicRegisterIndexImport.update({
  id: '/register/',
  path: '/register/',
  getParentRoute: () => PublicRoute,
} as any)

const PublicLoginIndexRoute = PublicLoginIndexImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => PublicRoute,
} as any)

const AuthSettingsIndexRoute = AuthSettingsIndexImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => AuthRoute,
} as any)

const AuthLogsIndexRoute = AuthLogsIndexImport.update({
  id: '/logs/',
  path: '/logs/',
  getParentRoute: () => AuthRoute,
} as any)

const AuthHomeIndexRoute = AuthHomeIndexImport.update({
  id: '/home/',
  path: '/home/',
  getParentRoute: () => AuthRoute,
} as any)

const AuthBuilderIndexRoute = AuthBuilderIndexImport.update({
  id: '/builder/',
  path: '/builder/',
  getParentRoute: () => AuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicImport
      parentRoute: typeof rootRoute
    }
    '/_auth/builder/': {
      id: '/_auth/builder/'
      path: '/builder'
      fullPath: '/builder'
      preLoaderRoute: typeof AuthBuilderIndexImport
      parentRoute: typeof AuthImport
    }
    '/_auth/home/': {
      id: '/_auth/home/'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof AuthHomeIndexImport
      parentRoute: typeof AuthImport
    }
    '/_auth/logs/': {
      id: '/_auth/logs/'
      path: '/logs'
      fullPath: '/logs'
      preLoaderRoute: typeof AuthLogsIndexImport
      parentRoute: typeof AuthImport
    }
    '/_auth/settings/': {
      id: '/_auth/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthSettingsIndexImport
      parentRoute: typeof AuthImport
    }
    '/_public/login/': {
      id: '/_public/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginIndexImport
      parentRoute: typeof PublicImport
    }
    '/_public/register/': {
      id: '/_public/register/'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof PublicRegisterIndexImport
      parentRoute: typeof PublicImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthBuilderIndexRoute: typeof AuthBuilderIndexRoute
  AuthHomeIndexRoute: typeof AuthHomeIndexRoute
  AuthLogsIndexRoute: typeof AuthLogsIndexRoute
  AuthSettingsIndexRoute: typeof AuthSettingsIndexRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthBuilderIndexRoute: AuthBuilderIndexRoute,
  AuthHomeIndexRoute: AuthHomeIndexRoute,
  AuthLogsIndexRoute: AuthLogsIndexRoute,
  AuthSettingsIndexRoute: AuthSettingsIndexRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface PublicRouteChildren {
  PublicLoginIndexRoute: typeof PublicLoginIndexRoute
  PublicRegisterIndexRoute: typeof PublicRegisterIndexRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicLoginIndexRoute: PublicLoginIndexRoute,
  PublicRegisterIndexRoute: PublicRegisterIndexRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof PublicRouteWithChildren
  '/builder': typeof AuthBuilderIndexRoute
  '/home': typeof AuthHomeIndexRoute
  '/logs': typeof AuthLogsIndexRoute
  '/settings': typeof AuthSettingsIndexRoute
  '/login': typeof PublicLoginIndexRoute
  '/register': typeof PublicRegisterIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof PublicRouteWithChildren
  '/builder': typeof AuthBuilderIndexRoute
  '/home': typeof AuthHomeIndexRoute
  '/logs': typeof AuthLogsIndexRoute
  '/settings': typeof AuthSettingsIndexRoute
  '/login': typeof PublicLoginIndexRoute
  '/register': typeof PublicRegisterIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/_auth/builder/': typeof AuthBuilderIndexRoute
  '/_auth/home/': typeof AuthHomeIndexRoute
  '/_auth/logs/': typeof AuthLogsIndexRoute
  '/_auth/settings/': typeof AuthSettingsIndexRoute
  '/_public/login/': typeof PublicLoginIndexRoute
  '/_public/register/': typeof PublicRegisterIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/builder'
    | '/home'
    | '/logs'
    | '/settings'
    | '/login'
    | '/register'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/builder'
    | '/home'
    | '/logs'
    | '/settings'
    | '/login'
    | '/register'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_public'
    | '/_auth/builder/'
    | '/_auth/home/'
    | '/_auth/logs/'
    | '/_auth/settings/'
    | '/_public/login/'
    | '/_public/register/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/_public"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/builder/",
        "/_auth/home/",
        "/_auth/logs/",
        "/_auth/settings/"
      ]
    },
    "/_public": {
      "filePath": "_public.tsx",
      "children": [
        "/_public/login/",
        "/_public/register/"
      ]
    },
    "/_auth/builder/": {
      "filePath": "_auth/builder/index.tsx",
      "parent": "/_auth"
    },
    "/_auth/home/": {
      "filePath": "_auth/home/index.tsx",
      "parent": "/_auth"
    },
    "/_auth/logs/": {
      "filePath": "_auth/logs/index.tsx",
      "parent": "/_auth"
    },
    "/_auth/settings/": {
      "filePath": "_auth/settings/index.tsx",
      "parent": "/_auth"
    },
    "/_public/login/": {
      "filePath": "_public/login/index.tsx",
      "parent": "/_public"
    },
    "/_public/register/": {
      "filePath": "_public/register/index.tsx",
      "parent": "/_public"
    }
  }
}
ROUTE_MANIFEST_END */
